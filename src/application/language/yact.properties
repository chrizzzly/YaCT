#-------------------------------------------------------------------------------
# YaCT | (c) 2015 Markus Hoppe | http://opensource.org/licenses/MIT
#-------------------------------------------------------------------------------

#Menu
menu.title.file = File
menu.title.new = New
menu.title.open = Open
menu.title.close = Close
menu.title.preferences = Preferences
menu.title.quit = Quit
menu.title.settings = Settings
menu.title.help = Help
menu.title.about = About YaCT

#Buttons
button.NewContainer = New container
button.OpenContainer = Open container
button.CloseContainer = Close container
button.AlterContainer = Change access data
button.next = Next
button.cancel = Cancel
button.keyfile.add = Add key files
button.closeAll = Close all
button.save.settings = Save settings

#Help
text.newContainerHelp = Creates a new encrypted container on the hard disc. \n\nThe encryption algorithms as well as the cryptographic hash functions can be individually selected. \n\nDefault containers are encrypted using AES - 256 bit.
text.openContainerHelp = Opens a container and mounts it to the file system
text.closeContainerHelp = Closes a container
text.alterContainerHelp = Change access data of an existing container

help.path = The container's location on the hard disk
help.password = A secure password should be at least 12 characters long, contain small and capital letters, numbers and special characters.\n\nNames, birthdates or simple character strings, such as 12345 or querty should NOT be used
help.password.use = The container's password
help.keyfiles = Key files are files that are used as keys in addition to the password.\n\nIt only uses the first 1024 bits of the file. The file type or file used can be chosen freely 
help.keyfiles.add = Add key files\n\nThe first 1024 bits of the file are used. The file types or file type used can be chosen freely 
help.keyfiles.use = Add used  key files.\n\nThe container cannot be opened without the key files used during its creation!
help.standard = Create a container with default settings.\n\nA default container is encrypted using AES - 256 bits, XTS mode and the cryptographic hash function Whirlpool. 
help.custom = Create a container with custom settings.\n\nThe encryption algorithm, mode and hash function can be selected separately.\n\nPLEASE NOTE THAT NOT ALL COMBINATIONS CAN BE REGARDED AS SECURE! ECB MODE SHOULD ONLY BE USED FOR TESTING PURPOSES!
help.size = The size of the container to be created.\n\nThe valule should be a several times the size of the file system block size. The default block size of NTFS is 4 KiB
help.closeOpenContainers = Closes the selected container
help.closeAll = Closes all open containers without asking
help.language = You can select the langauge here
help.newContainer.step = 
help.newContainer.blocksize = The block size of the new file system
help.newContainer.fs = The type of the new file system
help.progress = The container is being created

#RadioButtons
rb.standard = Default
rb.custom = Custom
#Tooltips
tooltip.standardContainer = Creates a container with default values
tooltip.customContainer = Creates a custom container 
tooltip.password = A secure password should be at least 12 characters long, contain small and capital letters, numbers and special characters.\n\nNames, birthdates or simple character strings, such as 12345 or querty should NOT be used
tooltip.password.use = The container's password Passwort des Containers
tooltip.path = The path where the file is located
tooltip.path.choose = Choose a path to your file
tooltip.size = The size of the container to be created
tooltip.size.unit = The size unit (MB=megabyte, GB=gigabyte)
tooltip.algorithm = The encryption algorithm
tooltip.hash = The cryptographic hash function
tooltip.mode = The encryption mode
tooltip.keyfile.list = The key files used
tooltip.keyfile.add = Add key files
tooltip.closeAll = Close all open containers\n\nWARNING: NO confirmation is requested\n\nThis can incur data losses, if any write processes are still incomplete!

#Labels
label.password = Password
label.password.repeat = Repeat password
label.password.now = Current password
label.password.then = New password
label.path = Path
label.size = Size
label.algorithm = Encryption algorithm
label.hash = Hash
label.mode = Mode
label.keyfile.list = Key files
label.list.openContainers = Open containers
label.password.then.repeat = Repeat new password
label.password.then = New password
label.password.now = Old passwort
label.language = Language
label.fs = File system
label.blocksize = Block size
label.iv = Initialization vector

#Links
link.about = Website

#About
text.about = YaCT - Yet another Crypto Tool\n\nThis program has been developed as part of a bachelor's thesis at the University of Kempten, Allg\u00e4u, Germany.\n\nIt uses JavaFX and the public crypto library BouncyCastle.\n\nYaCT | (c) 2015 Christian Hoppe | http://opensource.org/licenses/MIT

#FROM WIKIPEDIA
help.algorithm = TWOFISH is a symmetrical encryption algorithm used in IT. It is a block cipher algorithm with a block size of 128 bits and 16 rounds, the key available key lengths are 128, 192 or 256 bits.\n\nTHREEFISH is a so-called tweakable block encryption algorithm, which means that the type of permutations can be changed to a certain degree using an additional control channel. The tweak functions similar to an initialization vecotr or nonce, can be public and be swapped more quickly than the key.\n\nThe Advanced Encryption Standard (AES) represents a block cipher algorithm, designed to succeed the prior encryption standard DES, as announced by the National Institute of Standards and Technology (NIST) in October 2000. The Rijndael algorithm uses variable, independent block and key lengths of 128, 160, 192, 224 or 256 bits. Rijndael offers a high level of security. The first interesting, but in practice irrelevant, attack on it was found more than ten years after its standardization.\n\nSERPENT is a symmetrical encryption algorithm with a block size of 128 bits and variable key sizes of up to 256 bits. Serpent was rated highly secure and is believed to be the most secure of the AES finalists.
help.mode = In cryptography, a mode of operation is an algorithm that uses a block cipher to provide an information service such as confidentiality or authenticity.\n\nA block cipher by itself is only suitable for the secure cryptographic transformation (encryption or decryption) of one fixed-length group of bits called a block. Most modes require a unique binary sequence, often called an initialization vector (IV), for each encryption operation. The IV has to be non-repeating and, for some modes, random as well. The initialization vector is used to ensure distinct ciphertexts are produced even when the same plaintext is encrypted multiple times independently with the same key.\n\n\nECB - Electronic Code Book Mode - The simplest of the encryption modes is the Electronic Codebook (ECB) mode. The message is divided into blocks, and each block is encrypted separately.\n\nCBC - Cipher Block Chaining Mode -  In CBC mode, each block of plaintext is XORed with the previous ciphertext block before being encrypted. This way, each ciphertext block depends on all plaintext blocks processed up to that point. To make each message unique, an initialization vector must be used in the first block.\n\nXTS - XEX-based tweaked-codebook mode with ciphertext stealing - Ciphertext stealing provides support for sectors with size not divisible by block size, for example, 520-byte sectors and 16-byte blocks.
help.hash = RIPEMD-160 is a cryptographic hash function with 160 bits of length. RIPEMD-160 was designed in the open academic community, in contrast to the NSA designed SHA-1 and SHA-2 algorithms. On the other hand, RIPEMD-160 appears to be used somewhat less frequently than SHA-1, which may have caused it to be less scrutinized than SHA.\n\n\n\nWHIRLPOOL is a cryptographic hash function. Whirlpool is a hash designed after the Square block cipher. Whirlpool is a Miyaguchi-Preneel construction based on a substantially modified Advanced Encryption Standard (AES). It takes a message of any length less than 2256 bits and returns a 512-bit message digest.\n\n\n\nSHA-256 and SHA-512 (secure hash algorithm) are a set of cryptographic hash functions designed by the NSA.


#NE TRANSLATION NEEDED - deprecated
label.text.drag.here = 
